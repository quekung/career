var _scope;
var _child;
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) { return typeof obj; } : function(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var app = angular.module('ngApp', ['ngSanitize', 'BotDetectCaptcha']);
app.config(function (captchaSettingsProvider) {
   // set the captchaEndpoint property to point to 
    // the captcha endpoint path on your app's backend
    captchaSettingsProvider.setSettings({
        captchaEndpoint:
        tniWeb.ApiURL + '/simple-captcha-endpoint.ashx'
    });
});

app.controller('MainController', function($scope, $location, $http, $controller, $sce) {
    _scope = $scope;
    $scope.createjs = {};
    $scope.prd_url = '';
    if (window.location.hostname.indexOf('bot.or.th') > -1) {
        $scope.prd_url = 'default.aspx';
    }

    $scope.safeApply = function(fn) {
        try {
            var phase = this.$root.$$phase;
            if (phase == '$apply' || phase == '$digest')
                this.$eval(fn);
            else
                this.$apply(fn);
        } catch (e) {}

    };

    $scope.sendAPI = function(url, _data, callback) {
        var callback = callback || null;
        $(".loader-api").show();
        var data = {

        }
        for (var n in _data) {
            data[n] = _data[n]
        }
        console.log(url)
        $.ajax({
            type: "POST",
            url: url,
            dataType: "json",
            data: data,
            success: function(response) {
                console.log(response)
                $(".loader-api").hide();
                if (callback != null) {
                    callback(response);
                }
            }
        });
    }

    $scope.isNull = function(_var) {
        if (_var == null || _var == 'null' || _var == '' || _var == undefined || _var == 'undefined' || _var == 'NaN' || _var == NaN) {
            return true;
        } else {
            return false;
        }
    }
    $scope.isNumeric = function(input) {
        return !isNaN(parseFloat(input)) && isFinite(input);
    }
    $scope.isUndefined = function(st) {
        return st == undefined || st == null || st == '' || st == '0' || st == 0;
    }
    $scope.numberWithCommas = function(x, rounddigits) {
        if (rounddigits === undefined) {
            x = x.toString();
        }
        else {
            x = x.toFixed(rounddigits);
        }
        var pattern = /(-?\d+)(\d{3})/;
        while (pattern.test(x))
            x = x.replace(pattern, "$1,$2");
        return x;
    }
    $scope.isEmail = function(email)
    {
        var emailExpression = /^[a-z][\w.-]+@\w[\w.-]+\.[\w.-]*[a-z][a-z]$/i;
        return emailExpression.test(email);
    }
    $scope.isMobile = function(input)
    {
      return !isNaN(parseFloat(input)) && isFinite(input) && input.length>=10;

    }
})


app.directive('diFormPattern', function() {
  return {
      restrict: "A",
      compile: function(tElement, tAttrs) {
          return function(scope, element, attrs) {
              element.bind("input change keyup paste", function(event) {
                  var keyCode = this.value.slice(-1);
                  var keyCodeChar = this.value.slice(-1);
                  var st_pattern = "";
                  if(attrs.diFormPattern=="english")
                      st_pattern = "[a-z.A-Z]";
                  else if(attrs.diFormPattern=="thai")
                      st_pattern = "[ภถุึคตจขชๆไำพะัีรนยบลฟหกดเ้่าสวงผปแอิืทมใฝฃูฎฑธํ๊ณฯญฐฅฤฆฏโฌ็๋ษศซฉฮฺ์ฒฬฦ A-Za-z]";
                   else if(attrs.diFormPattern=="textaddress")
                      st_pattern = "[ภถุึคตจขชๆไำพะัีรนยบลฟหกดเ้่าสวงผปแอิืทมใฝฃูฎฑธํ๊ณฯญฐฅฤฆฏโฌ็๋ษศซฉฮฺ์ฒฬฦ A-Za-z0-9+#.-\/]"
                  else if(attrs.diFormPattern=="number")
                      st_pattern = "[0-9]"
                  else if(attrs.diFormPattern=="numberslash")
                      st_pattern = "[0-9\/\-]"
                  else if(attrs.diFormPattern=="numberpoint")
                      st_pattern = "[0-9.]"
                  else if(attrs.diFormPattern=="email")
                      st_pattern = "[a-z_.@0-9\\-\\^]"
                  else if(attrs.diFormPattern=="unchar")
                      st_pattern = "[]"
                  if (!keyCodeChar.match(new RegExp(st_pattern, "i"))) {
                    //  event.preventDefault();
                      var inputString = this.value;
                      var shortenedString = inputString.substr(0,(inputString.length -1));
                      this.value = shortenedString
                      return false;
                  }

              });
          };
      }
  };
})

app.controller('CreatejsContoller', function($scope, $location, $http, $attrs, $sce) {
    var setting_data = {
      type: '',
      scale: 'full',
      width: 960,
      height: 640,
      id: '',
      onpage: 'yes',
      obj: '',
      comp: '',
      mobile_width:750,
      mobile_height:0,
      mobile_start:919,
      mobile:false,
      drag:false
    };
  
    $scope.myHTML = "";
  
    // console.log($attrs)
  
    setting_data.scale = $attrs.scale || setting_data.scale;
    setting_data.width = $attrs.width || setting_data.width;
    setting_data.height = $attrs.height || setting_data.height;
    setting_data.id = $attrs.id || setting_data.id;
    setting_data.type = $attrs.type || $attrs.id;
    setting_data.onpage = $attrs.onpage || setting_data.onpage;
    setting_data.obj = $attrs.obj || setting_data.obj;
    setting_data.comp = $attrs.comp || setting_data.comp;
    setting_data.mobile_width = $attrs.mobileWidth || setting_data.mobile_width;
    setting_data.mobile_height = $attrs.mobileHeight || setting_data.mobile_height;
    setting_data.mobile_start = $attrs.mobileStart || setting_data.mobile_start;
    setting_data.mobile = $attrs.mobile || setting_data.mobile;
  
    if (setting_data.obj != '') {
      setting_data.obj = jQuery.parseJSON(($attrs.obj.toString()))
    }
  
    var id = setting_data.id;
    var type = setting_data.type;
    var scale = setting_data.scale;
    var width = setting_data.width;
    var height = setting_data.height;
    var onpage = setting_data.onpage;
    var dataObject = setting_data.obj;
    var canvas, stage, exportRoot, anim_container, dom_overlay_container, fnStartAnimation;
    var comp, lib, images, ss;
    var _numload = 0;
    var st = '';
    var fixh = 0;
  
    st += '<div id="animation_container_' + type + '" style="width:' + width + 'px; height:' + height + 'px">'
    st += '<canvas id="canvas_' + type + '" width="' + width + '" height="' + height + '" style="position: absolute; display: block;"></canvas>'
    st += '<div id="dom_overlay_container_' + type + '" style="pointer-events:none; overflow:hidden; width:' + width + 'px; height:' + height + 'px; position: absolute; left: 0px; top: 0px; display: block;">'
    st += '</div>'
    st += '</div>'
  
    $scope.myHTML = $sce.trustAsHtml(st);
    
    $(document).ready(function() {
      init();
    });
  
  
    function init() {
      comp = AdobeAn.getComposition(setting_data.comp);
      lib = comp.getLibrary();
      if (!jQuery.isEmptyObject(lib.properties.manifest)) {
        for(var i=0;i<lib.properties.manifest.length;i++){
          lib.properties.manifest[i]['src'] = '/dist/animate/'+lib.properties.manifest[i]['src']
        }
        var loader = new createjs.LoadQueue(false);
        loader.addEventListener("fileload", function(evt) {
          handleFileLoad(evt)
        });
        loader.addEventListener("complete", function(evt) {
          handleComplete(evt)
        });
        loader.loadManifest(lib.properties.manifest);
      } else {
        setLib()
      }
      createjs.MotionGuidePlugin.install();
    }
  
    function handleFileLoad(evt) {
      _numload++;
      console.log('handleFileLoad : ' + _numload)
      images = comp.getImages();
      if (evt && (evt.item.type == "image")) {
        images[evt.item.id] = evt.result;
        var percentage = Math.round((_numload / lib.properties.manifest.length) * 100);
        try {
          kkmFlow.showWait(percentage);
        } catch (e) {}
      }
    }
  
    function handleComplete(evt) {
      ss = comp.getSpriteSheet();
      var queue = evt.target;
      var ssMetadata = lib.ssMetadata;
      for (i = 0; i < ssMetadata.length; i++) {
        ss[ssMetadata[i].name] = new createjs.SpriteSheet({
          "images": [queue.getResult(ssMetadata[i].name)],
          "frames": ssMetadata[i].frames
        })
      }
      
      setTimeout(function() {
        setLib();
        }, 500);
    }
  
    function setLib() {
      canvas = document.getElementById("canvas_" + type);
      anim_container = document.getElementById("animation_container_" + type);
      dom_overlay_container = document.getElementById("dom_overlay_container_" + type);
      var kkmAction = this[id + "Action"]
      exportRoot = new lib[id]();
      stage = new lib.Stage(canvas);
  
      $scope.createjs[type + "_root"] = exportRoot;
      $scope.createjs[type + "_action"] = kkmAction;
      kkmAction.setupStart(exportRoot, stage, lib, $scope);
      fnStartAnimation = function() {
        stage.addChild(exportRoot);
        createjs.Ticker.setFPS(lib.properties.fps);
        createjs.Ticker.addEventListener("tick", stage);
      }
  
      function makeResponsive(isResp, respDim, isScale, scaleType) {
        var lastW, lastH, lastS = 1;
        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();
  
        function resizeCanvas() {
          var w = lib.properties.width, h = lib.properties.height;
  
          if(setting_data.mobile){
            if(jQuery(window).width()<=setting_data.mobile_start){
              w = setting_data.mobile_width
              h = setting_data.mobile_height
            }
          }
  
          var iw = jQuery("#canvas_" + type).parent().parent().parent().width();
          var ih = jQuery(window).height();
          var pRatio = window.devicePixelRatio || 1,
            xRatio = iw / w,
            yRatio = ih / h,
            sRatio = 1;
          if (isResp) {
            if ((respDim == 'width' && lastW == iw) || (respDim == 'height' && lastH == ih)) {
              sRatio = lastS;
            } else if (!isScale) {
              if (iw < w || ih < h)
                sRatio = Math.min(xRatio, yRatio);
            } else if (scaleType == 1) {
              sRatio = Math.min(xRatio, yRatio);
            } else if (scaleType == 2) {
              sRatio = Math.max(xRatio, yRatio);
            }
          }
            if (jQuery("#canvas_" + type).parent().parent().parent().width() > 0) {
                canvas.width = w * pRatio * sRatio;
                canvas.height = h * pRatio * sRatio;
                canvas.style.width = dom_overlay_container.style.width = anim_container.style.width = w * sRatio + 'px';
                canvas.style.height = anim_container.style.height = dom_overlay_container.style.height = h * sRatio + 'px';
                stage.scaleX = pRatio * sRatio;
                stage.scaleY = pRatio * sRatio;
                lastW = iw;
                lastH = ih;
                lastS = sRatio;
                stage.tickOnUpdate = false;
                stage.update();
                stage.tickOnUpdate = true;
                jQuery("#canvas_" + type).parent().parent().parent().parent().css('min-height',h * sRatio+'px');
                try {
                kkmAction.resizeContent(iw, ih, pRatio, sRatio,scale);
                } catch (e) {}
            }
        }
  
  
        kkmAction.resizeCanvas = resizeCanvas;
      }
  
      makeResponsive(true, 'both', true, 1);
  
      AdobeAn.compositionLoaded(lib.properties.id);
      fnStartAnimation();
  
      if (onpage == 'true') {
        if (kkmFlow.createjsArray.indexOf(type) == -1) {
          kkmFlow.createjsArray.push(type);
        }
        try {
          kkmFlow.createjs[type + "_remove"] = removeEvent;
        } catch (e) {}
  
        try {
          kkmFlow.createjs[type + "_removeAllEvent"] = kkmAction.removeAllEvent;
        } catch (e) {}
      }
  
      function removeEvent() {
        createjs.Ticker.removeEventListener("tick", stage);
        stage.clear();
      }
  
      // if (setting_data.drag=='true') {
        createjs.Touch.enable(stage);
        stage.enableMouseOver(10);
        stage.mouseMoveOutside = true;
      // }
    }
  
  });
  
app.directive('onErrorSrc', function() {
    return {
        link: function(scope, element, attrs) {
          element.bind('error', function() {
            if (attrs.src != attrs.onErrorSrc) {
              attrs.$set('src', attrs.onErrorSrc);
            }
          });
        }
    }
});


if (typeof Object.assign != 'function') {
  // Must be writable: true, enumerable: false, configurable: true
  Object.defineProperty(Object, "assign", {
    value: function assign(target, varArgs) { // .length of function is 2
      'use strict';
      if (target == null) { // TypeError if undefined or null
        throw new TypeError('Cannot convert undefined or null to object');
      }

      var to = Object(target);

      for (var index = 1; index < arguments.length; index++) {
        var nextSource = arguments[index];

        if (nextSource != null) { // Skip over if undefined or null
          for (var nextKey in nextSource) {
            // Avoid bugs when hasOwnProperty is shadowed
            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
              to[nextKey] = nextSource[nextKey];
            }
          }
        }
      }
      return to;
    },
    writable: true,
    configurable: true
  });
}


